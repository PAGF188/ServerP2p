/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package p2pClient;

import p2pServer.Cliente;

import javax.swing.*;
import javax.swing.table.DefaultTableCellRenderer;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.util.HashMap;
import java.util.Map;

/**
 *
 * @author pablo
 */
public class Vin extends javax.swing.JFrame {

    /*Necesito tener un arrayList que relacioe tablas con usuarios ¿Un hashMap?*/
    private HashMap<String,JTable> usuario_tabla;

    /*Usuario activo con el que estoy hablando*/
    private String usuario;

    public Vin() {
        initComponents();

        this.setLocationRelativeTo(null);
        this.setResizable(false);
        this.usuario_tabla = new HashMap<>();
        this.usuario=null;

        send.setEnabled(false);
        send.setText("Selecciona un amigo para chatear con el.");
        this.setTitle("Bienvenido " + P2pClient.yoNombre);

        /*Evento para salir de la ventana*/
        this.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
        this.addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosing(java.awt.event.WindowEvent e) {
                try {
                    P2pClient.server.desLog(P2pClient.yoNombre);
                    e.getWindow().dispose();
                    System.exit(1);
                }catch(Exception ex){
                    ex.printStackTrace();
                }
            }
        });
    }

    public HashMap<String, JTable> getUsuario_tabla() {
        return usuario_tabla;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        scroll = new javax.swing.JScrollPane();
        jPanel4 = new javax.swing.JPanel();
        send = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel2.setBackground(new java.awt.Color(23, 138, 28));

        jLabel1.setFont(new java.awt.Font("Cantarell", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(254, 254, 254));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Amigos");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
                jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 201, Short.MAX_VALUE)
                                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
                jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addComponent(jLabel1)
                                .addContainerGap(419, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
                jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGap(44, 44, 44)
                                .addComponent(send, javax.swing.GroupLayout.PREFERRED_SIZE, 345, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(47, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
                jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel4Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(send, javax.swing.GroupLayout.DEFAULT_SIZE, 45, Short.MAX_VALUE)
                                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(scroll, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                        .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(scroll, javax.swing.GroupLayout.PREFERRED_SIZE, 390, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(6, 6, 6))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );


        /*Send*/
        send.setFont(new java.awt.Font("Cantarell", 0, 16)); // NOI18N
        send.setText("Escribe tu mensaje aquí");
        send.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                sendFocusLost(evt);
            }
        });
        send.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                sendMouseClicked(evt);
            }
        });
        send.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                sendKeyTyped(evt);
            }
            public void keyPressed(java.awt.event.KeyEvent evt) {
                sendKeyPressed(evt);
            }
        });

        /*Boton peticiones*/
        peticiones = new JButton();
        peticiones.setText("Peticiones");
        peticiones.setSize(160,38);
        peticiones.setLocation(31, 410);
        peticiones.setBackground(new java.awt.Color(188, 167, 65));
        peticiones.setFont(new java.awt.Font("Cantarell", 1, 24));
        peticiones.setForeground(new java.awt.Color(254, 254, 254));
        peticiones.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                peticionesActionPerformed(evt);
            }
        });
        jPanel2.add(peticiones);

        pack();
    }// </editor-fold>

    /*Al pulsar en peticiones*/
    private void peticionesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registroActionPerformed
        Vpeticiones vpe = new Vpeticiones(this);
        vpe.setVisible(true);
        this.setVisible(false);
    }

    /**/
    private void sendKeyPressed(java.awt.event.KeyEvent evt) {
        // enviar pulsando en "enter"
        if(evt.getKeyCode()== KeyEvent.VK_ENTER){
            this.enviar();
        }
    }

    private void sendMouseClicked(java.awt.event.MouseEvent evt) {
        // Al cliclar el la textBox de entrada, se elimina el mensaje informativo
        if(send.getText().equals("Escribe tu mensaje aquí"))
            send.setText(null);
    }

    /*qitar este evento seguramente*/
    private void sendFocusLost(java.awt.event.FocusEvent evt) {
        // El perder el focus (clicar en otro elemento), se reinicia el mensaje informativo
        if(send.getText().equals("")){
            send.setText("Escribe tu mensaje aquí");
        }
    }

    private void sendKeyTyped(java.awt.event.KeyEvent evt) {
        /** Límite a los mensajes de 34 bytes.
        * Cada vez que se introduce un nuevo caracter se comprueba si no rebasa el límite.
        * En caso afirmativo se rechazaría
         */
        if(send.getText().getBytes().length == 34){
            evt.consume();
        }
    }

    /**Para saber a quien enviar el mensaje, miramos el atributo usuario. Este nos indica el amigo con
     * el que estoy hablando en el momento actual
     */
    private void enviar(){
        /*Enviar*/
        for(Cliente clAux : P2pClient.amigos){
            if(clAux.getNombre().equals(usuario)){
                try{
                    /*Enviamos el mensaje*/
                    clAux.getInterfazRemota().mensaje(send.getText(), P2pClient.yoNombre);
                    //Pero también lo añadimos a la tabla de conversación con ese usuario en la zona de la derecha.
                    //Para ello iniciamos mensaje con {
                    ModeloTabla modelo_aux =  (ModeloTabla) this.usuario_tabla.get(usuario).getModel();
                    String  comentario = "{<html><span style='color:#178a1d; font-size:10pt;'>"+P2pClient.yoNombre+"</span>"
                            + "<br>"
                            + "<span style='color:white;font-weight:bold;background-color:"
                            +"#178a1d"+ ";'>"+send.getText()+"</span></html>";
                    modelo_aux.addComentario(comentario);
                    //Limpiamos campo donde se introduce mensaje
                    send.setText(null);
                }catch(Exception e){
                    System.out.println("Error al enviar mensaje de " + P2pClient.yoNombre + " a " + clAux.getNombre());
                    System.out.println("Interfaz remota: " + clAux.getInterfazRemota());
                    e.printStackTrace();
                }
            }
        }
    }
    /*Nota para eliminar el boton habrá que recorrer jPanel2 y eliminar el que tenga como texto un nombre ocncreto*/
    public void actualizarAmigos(){
        int incremento=70;
        for(Cliente amigo: P2pClient.amigos){
            /*Si el amigo no está añadido ya a la interfaz, lo añadimos en forma botón y creamos su tabla*/
            if(!this.contiene(jPanel2,amigo)){
                System.out.println("Vamos añadir a: " + amigo.getNombre());
                JButton aux = new JButton();
                aux.setText(amigo.getNombre());
                aux.setSize(140,38);
                aux.setLocation(41, incremento);
                aux.setBackground(new java.awt.Color(71, 103, 176));
                aux.setFont(new java.awt.Font("Cantarell", 1, 24));
                aux.setForeground(new java.awt.Color(254, 254, 254));

                /*creamos el controlador para el boton*/
                aux.addActionListener(new ActionListener() {

                    /*acción al pulsar en un amigo*/
                    public void actionPerformed(ActionEvent e) {
                        /*El botón que anteriormente estaba deshabilitado, lo habilitamos*/
                        if(usuario!=null){
                            for(Component cp: jPanel2.getComponents()) {
                                if(cp instanceof JButton && ((JButton) cp).getText().equals(usuario)) {
                                    cp.setEnabled(true);
                                    cp.setBackground( new Color(71,103,176));
                                }
                            }
                        }
                        /*Ponemos el botón del amigo actual deshabilitado*/
                        aux.setEnabled(false);
                        aux.setBackground(new Color(109, 0, 134));

                        /*Colocamos la tabla de mensajes del usuario actual*/
                        scroll.setViewportView(usuario_tabla.get(aux.getText()));
                        /*Ponemos el usuario actual con el que estamos hablando*/
                        usuario = aux.getText();
                        /*Habilitamos el campo de introducción mensajes*/
                        send.setEnabled(true);
                        send.setText("Escribe tu mensaje aquí");
                    }
                });
                /*añadimos el botón*/
                jPanel2.add(aux);

                /*creamos la tabla*/
                JTable tabla = new JTable();
                tabla.setModel(new ModeloTabla());
                /*Configuramos la tabla*/
                tabla.setBackground(new java.awt.Color(235, 239, 242));
                tabla.setFont(new java.awt.Font("Cantarell", 0, 16));
                tabla.setGridColor(new java.awt.Color(2, 2, 2));
                tabla.setIntercellSpacing(new java.awt.Dimension(0, 20));
                tabla.setRowHeight(60);
                tabla.setRowSelectionAllowed(false);
                tabla.setShowHorizontalLines(false);
                tabla.setShowVerticalLines(false);
                tabla.setTableHeader(null);
                /*Alinear 2º columna a derecha*/
                DefaultTableCellRenderer tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.RIGHT);
                tabla.getColumnModel().getColumn(1).setCellRenderer(tcr);

                usuario_tabla.put(aux.getText(),tabla);
                this.repaint();
            }
            incremento+=70;

        }
        /*Debug*/
        System.out.println("Componentes jpanel4: " + jPanel4.getComponents().length);
    }

    /*Desconexión de un amigo actualizar IGrafica*/
    public void actualizarDesconexion(String nombre){
        /*Si estoy hablando con el que se descoceta null*/
        if(usuario!=null && usuario.equals(nombre)){
            usuario=null;
            send.setEnabled(false);
            send.setText("Selecciona un amigo para chatear con el.");
            scroll.setViewport(null);
        }

        /*Eliminamos su entrada en HashMap*/
        usuario_tabla.remove(usuario_tabla.get(nombre));

        /*Eliminamos su botón asociado*/
        JButton borrar=null;
        for(Component cp: jPanel2.getComponents()) {
            if (cp instanceof JButton && ((JButton) cp).getText().equals(nombre)) {
                borrar = (JButton) cp;
            }
        }
        jPanel2.remove(borrar);

        /*Recolocamos el resto de elementos*/
        int incremento=70;
        for(Component cp: jPanel2.getComponents()) {
            if (cp instanceof JButton) {
                cp.setLocation(41, incremento);
            }
        }

        this.repaint();
    }

    public boolean contiene(JPanel jp,Cliente cl){
        for(Component cp: jp.getComponents()){
            if(cp instanceof JButton && ((JButton) cp).getText().equals(cl.getNombre())){
                System.out.println("Condicion contiene: " + ((JButton) cp).getText());
                return(true);
            }
        }
        return(false);
    }

    // Variables declaration
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane scroll;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JTextField send;
    private JButton peticiones;
    // End of variables declaration
}
